
// Socket Server
var express = require('express');
var app = express();
var server = require('http').Server(app);
var io = require('socket.io').listen(server);

//SQL data base
var mysql = require('mysql');

var pool = mysql.createPool(
    {
        connectionLimit: 100,
        host: "192.168.1.3",
        port: "3307",
        user: "SSOserver",
        password: "candycane",
        database: "sso"
    });



var server_port = process.env.OPENSHIFT_NODEJS_PORT || 8080;
var server_ip_address = process.env.OPENSHIFT_NODEJS_IP || '0.0.0.0';


// An array to store all of the players currently
var playerStack = [];

app.get('/', 

    function(req, res)
    {
        res.sendFile(__dirname + '/index.html');
    }
    );

io.on('connection', onConnection);

/*****************************************************
* Purpose: Setup for when someone connects
* Imports: socket - the individual conetion socket
* exports: none
******************************************************/
function onConnection(socket)
{

    var initPlayer = false;

    console.log('A user has connected');


    socket.on('Initialise Player', 
        function(playerID)
        {
            socket.playerID = playerID;
        });
    //socket.name = "test";
    socket.actor = new Actor();

    // Get the values for the actor from the database given the playerID
    pool.getConnection(
        function(err, connection)
        {
            if (err)
            {
                console.log("error connecting to database");
                console.log(err);
            }
            else
            {
                connection.query("SELECT * from playerstats where playerID" + socket.playerID, 
                function(err, row)
                {
                    console.log(row);
                });
            }

        });
    

    /*
    socket.on("tick",
        function()
        {
            updatePos(socket.actor);
        })
    */

    socket.on('Request Players',
        function(playerObj)
        {


            var count = 0;
            var length = playerStack.length
            for (var i = length - 1; i >= 0; i--) 
            {
                if (playerStack[i].playerID === playerObj.playerID)
                {
                    playerStack[i] = playerObj;
                }
                else
                {
                    count++;
                }
            }
            if (count === length) //we went through the whole array without a match
            {
                playerStack.push(playerObj);
                socket.playerID = playerObj.playerID;
                console.log(socket.playerID + " was added");
            }
            playerStackSort();
            //console.log(playerStack);

            socket.emit('Update Players', playerStack);
        });
    



    socket.emit('event stuff', "poop");
    socket.on('event stuff2', 
        function(msg)
        {
            console.log(msg);
        });
    socket.on('disconnect',

    /***********************************************
    * Purpose: Run when someone disconnects to remove them
    * Imports: socket - the socket for the disconecting player
    ******************************************************/
    function()
    {
        console.log(socket.playerID + ' disconnected');
        console.log(playerStack);

        for (var i = playerStack.length - 1; i >= 0; i--) 
        {
            if (playerStack[i].playerID === socket.playerID)
            {
                playerStack.splice(i, 1);
            }
        }
    }
    ); //end on disconnect


}


function playerStackSort()
{
    playerStack.sort(
        function(a, b)
        {
            return a.playerID - b.playerID; 
        });
}

setInterval(function()
{
    //io.emit("tick");
    tick();
}, 33); // run at ~30 ticks per second (33ms per tick)

function tick()
{
    for (var i = playerStack.length - 1; i >= 0; i--) 
    {
        updatedPos(playerStack[i]);
    }
}




server.lis
ten(server_port, server_ip_address, 
    function()
    {
        console.log("listening on " + server_ip_address + ", port " + server_port);
    }
    );






/*************************************************************************

    Functions to do with game mechanics

***************************************************************************/

var gravityY = -0.2;
var gravityX = 0;

function Actor()
{

    // Stats
    this.HP = 0;
    this.mana = 0;
    this.agility = 0;
    this.defence = 0;
    this.AP = 0;
    this.AD = 0;


    // Not actual stats
    this.velocityX = 0;
    this.velocityY = 0;
    this.x = 0;
    this.y = 0;
    this.direction = "left";
    this.animation = "idle";
    this.moveSpeed = 0;
    this.rollSpeed = 0;
    this.jumpSpeed = 0;

}


function updatePos(player)
{

    // Apply gravity
    player.velocityY += gravityY;
    plaeyr.velocityX += gravityX;

    // Update position
    player.x += player.velocityX;
    player.y += player.velocityY;
}


function inputSorter(player, input)
{
    switch(input)
    {
        case "moveLeft":
            move(player, "left");
            break;
        case "moveRight":
            move(player, "right");
            break;
        case "jump":
            jump(player);
            break;
        case "rollLeft":
            roll(player, "left");
            break;
        case "rollRight":
            roll(player, "right");
            break;
    }
}

function move(player, dir)
{
    switch(dir)
    {
        case "left":
            player.velocityX = -player.moveSpeed;
            player.direction = "left";
            break;
        case "right":
            player.velocityX = -player.moveSpeed;
            player.direction = "right";
            break;
        default:
            player.velocityX = 0;
            break;
    }

    player.animation = "run";
}

function jump(player)
{
    player.velocityY = player.jumpSpeed;
    player.animation = "jump";
}

function roll(player, dir)
{
    switch(dir)
    {
        case "left":
            player.velocityX = -player.rollSpeed;
            player.direction = "left";
            break;
        case "right":
            player.velocityX = player.rollSpeed;
            player.direction = "left";
            break;
    }

    player.animation = "roll";
}
